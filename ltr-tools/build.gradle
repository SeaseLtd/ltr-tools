apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'io.sease.ltr.tools'
version = project.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://maven.restlet.com" }
}

buildscript {
    ext {
        solr_version = project.version
    }
}

jar {
    baseName = 'ltr-tools'
    manifest {
        attributes 'Implementation-Title': 'LTR Tools',
                   'Main-Class': 'io.sease.ltr.tools.CliLtrTools'
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

/* External project dependencies, associated to different life cycles ( compile, test,ect ) */
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'ch.qos.logback:logback-core:1.1.3'

    compile 'commons-cli:commons-cli:1.3.1'
    compile 'commons-lang:commons-lang:2.6'

    compile("org.apache.solr:solr-solrj:${solr_version}")

    testCompile("org.apache.solr:solr-core:${solr_version}")
    testCompile("org.apache.solr:solr-test-framework:${solr_version}")

    testCompile('org.powermock:powermock-module-junit4:1.6.3')
    testCompile('org.powermock:powermock-api-mockito:1.6.3')
    testCompile('org.hamcrest:hamcrest-all:1.3')
    testCompile('org.unitils:unitils-core:3.4.2')
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

processResources {
    expand(project.properties)
}

task installSolrConfiguration(type: Copy) {
    from project(":configuration").file('solr')
    into "build/solr"
}

/* Task to generate user friendly reports for the tests . They are going to be available under :
* subproject/build/reports/integrationTest/index.html
* subproject/build/reports/test/index.html
* */
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    systemProperties System.properties
    systemProperties['user.dir'] = workingDir
}


/* This define the tasks required to be executed before a specific task
* e.g.
* integrationTest task requires installSolrConfiguration to be executed first
* */
test.dependsOn installSolrConfiguration